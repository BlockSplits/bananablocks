'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (babel) {
  var t = babel.types;


  var allParamsAreTyped = function allParamsAreTyped(path) {
    return !!(path.params && path.params.length > 0 && path.params.every(function (p) {
      return !!p.typeAnnotation;
    }));
  };

  var isTopLevelExport = function isTopLevelExport(path) {
    return !!(t.isExportDefaultDeclaration(path.parentPath) || t.isExportNamedDeclaration(path.parentPath) || t.isVariableDeclarator(path.parentPath) && t.isVariableDeclaration(path.parentPath.parentPath) && isTopLevelExport(path.parentPath.parentPath));
  };

  var walkToRoot = function walkToRoot(path) {
    while (!t.isProgram(path.parentPath)) {
      // eslint-disable-next-line no-param-reassign
      path = path.parentPath;
    }

    return path;
  };

  return {
    inherits: require('babel-plugin-syntax-flow'),

    visitor: {
      ImportDeclaration: function ImportDeclaration(path) {
        if (path.node.importKind === 'type') {
          // eslint-disable-next-line no-param-reassign
          path.node.importKind = 'value';
        }
      },
      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
        if (path.node.exportKind === 'type') {
          var _path$node = path.node,
              declaration = _path$node.declaration,
              specifiers = _path$node.specifiers;


          path.node.exportKind = 'value';

          if (declaration) {
            var namedExport = {
              type: 'ExportNamedDeclaration',
              specifiers: [t.exportSpecifier(declaration.id, declaration.id)],
              exportKind: 'value'
            };

            path.replaceWithMultiple([declaration, namedExport]);
          }
        }
      },
      TypeAlias: function TypeAlias(path) {
        var node = path.node;

        var ast = (0, _transformType2.default)(node.id.name, node.right, node.typeParameters);
        path.replaceWithMultiple(ast);
      },
      FunctionDeclaration: function FunctionDeclaration(path) {
        if (allParamsAreTyped(path.node) && isTopLevelExport(path)) {
          var name = path.node.id.name;
          var fn = (0, _transformFunction2.default)(name, path.node.params, path.node.typeParameters);
          var root = walkToRoot(path);
          root.insertAfter(fn);
        }
      },
      FunctionExpression: function FunctionExpression(path) {
        if (allParamsAreTyped(path.node) && isTopLevelExport(path) && t.isVariableDeclarator(path.parentPath)) {
          var name = path.parentPath.node.id.name;

          var fn = (0, _transformFunction2.default)(name, path.node.params, path.node.typeParameters);
          var root = walkToRoot(path);
          root.insertAfter(fn);
        }
      },
      ArrowFunctionExpression: function ArrowFunctionExpression(path) {
        if (allParamsAreTyped(path.node) && isTopLevelExport(path) && !t.isCallExpression(path.parentPath)) {
          var name = path.parentPath.node.id.name;
          var fn = (0, _transformFunction2.default)(name, path.node.params, path.node.typeParameters);
          var root = walkToRoot(path);
          root.insertAfter(fn);
        }
      }
    }
  };
};

var _transformType = require('./transformType');

var _transformType2 = _interopRequireDefault(_transformType);

var _transformFunction = require('./transformFunction');

var _transformFunction2 = _interopRequireDefault(_transformFunction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }