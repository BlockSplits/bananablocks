'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transform;

var _babelCore = require('babel-core');

var babel = _interopRequireWildcard(_babelCore);

var _GEN_ID = require('./GEN_ID');

var _GEN_ID2 = _interopRequireDefault(_GEN_ID);

var _genFromAST = require('./genFromAST');

var _genFromAST2 = _interopRequireDefault(_genFromAST);

var _typeAST = require('./typeAST');

var _typeAST2 = _interopRequireDefault(_typeAST);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var t = babel.types;


var requireStatement = babel.template('var ' + _GEN_ID2.default + ' = require(\'babel-plugin-transform-flow-to-gen/lib/typeHelpers\');')();

function typeParams(path) {
  if (path && path.params) {
    return path.params.map(function (param) {
      return {
        name: param.name
      };
    });
  }

  return [];
}

function createParams(params) {
  if (params.length === 0) {
    return null;
  }

  return t.variableDeclaration('var', [t.variableDeclarator(t.arrayPattern(params.map(function (p) {
    return t.identifier(p.name);
  })), t.identifier('args'))]);
}

function transform(name, typeAnnotation, typeParameters) {
  var type = (0, _typeAST2.default)(typeAnnotation);
  var params = typeParams(typeParameters);

  return babel.template('function NAME(...args) {REQUIRE; PARAMS; return GEN;}')({
    NAME: t.identifier(name),
    REQUIRE: requireStatement,
    PARAMS: createParams(params),
    GEN: (0, _genFromAST2.default)(type, params)
  });
}